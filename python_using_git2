import git
import os
import pandas as pd

# Define the repository URL and local path where the repo will be cloned
repo_url = 'https://github.com/username/repository_name.git'
local_path = '/path/to/clone/repository'
branch_name = 'DQ_Inventory_files'  # Branch name other than main

# Clone the repository if it's not already cloned
if not os.path.exists(local_path):
    print(f'Cloning repository from {repo_url}...')
    repo = git.Repo.clone_from(repo_url, local_path, branch=branch_name)
else:
    print(f'Repository already exists at {local_path}. Opening...')
    repo = git.Repo(local_path)

    # Checkout to the specified branch
    print(f"Checking out to branch: {branch_name}")
    repo.git.checkout(branch_name)

# Initialize a dictionary to hold DataFrames
dataframes = {}

# Walk through the files in the local repository
print("Listing all CSV files in the repository:")
for root, dirs, files in os.walk(local_path):
    for file in files:
        # Only process CSV files
        if file.endswith('.csv'):
            file_path = os.path.join(root, file)
            print(f"Reading CSV file: {file_path}")

            # Read CSV file into a Pandas DataFrame
            try:
                df = pd.read_csv(file_path)
                # Store the DataFrame with the file name (without extension) as the key
                file_name = os.path.splitext(file)[0]
                dataframes[file_name] = df
                print(f"Successfully read {file_path} into a DataFrame: {file_name}\n")
            except Exception as e:
                print(f"Failed to read {file_path}. Error: {e}")

# Example: Access each DataFrame separately
if dataframes:
    for name, df in dataframes.items():
        print(f"DataFrame for {name}:")
        print(df.head())  # Display first few rows of each DataFrame
else:
    print("No CSV files found.")
