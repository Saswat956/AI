Step 1: Set Up Your Environment
Create a Project Directory:
bash
mkdir fastapi_postgres_example
cd fastapi_postgres_example

Create a Python File:
bash
touch main.py

Create a Virtual Environment (Optional but Recommended):
bash
python -m venv venv
source venv/bin/activate  # On Windows use `venv\Scripts\activate`

Install Required Packages:
bash
pip install fastapi uvicorn psycopg2-binary sqlalchemy

fastapi: The web framework.
uvicorn: ASGI server for running FastAPI.
psycopg2-binary: PostgreSQL adapter for Python.
sqlalchemy: ORM for database interaction.


Step 2: Set Up PostgreSQL
Create a PostgreSQL Database: You can use the following SQL command to create a database named fastapi_db.
sql
CREATE DATABASE fastapi_db;

Create a Table: Connect to your PostgreSQL database and create a table named items:
sql
CREATE TABLE items (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    price NUMERIC(10, 2) NOT NULL
);


Step 3: Develop the FastAPI Application
Open main.py and add the following code:
python
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, Integer, String, Numeric
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session

# Database configuration
DATABASE_URL = "postgresql://username:password@localhost/fastapi_db"  # Replace with your PostgreSQL credentials

# SQLAlchemy setup
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Define the Item model
class Item(Base):
    __tablename__ = 'items'
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String)
    price = Column(Numeric(10, 2))

# Create the database tables
Base.metadata.create_all(bind=engine)

# FastAPI instance
app = FastAPI()

# Pydantic model for request validation
class ItemCreate(BaseModel):
    name: str
    description: str
    price: float

class ItemResponse(ItemCreate):
    id: int

    class Config:
        orm_mode = True

# Dependency to get the database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Endpoint to create a new item
@app.post("/items/", response_model=ItemResponse)
def create_item(item: ItemCreate, db: Session = next(get_db())):
    db_item = Item(name=item.name, description=item.description, price=item.price)
    db.add(db_item)
    db.commit()
    db.refresh(db_item)
    return db_item

# Endpoint to get all items
@app.get("/items/", response_model=list[ItemResponse])
def read_items(skip: int = 0, limit: int = 10, db: Session = next(get_db())):
    items = db.query(Item).offset(skip).limit(limit).all()
    return items

# Endpoint to get a specific item by ID
@app.get("/items/{item_id}", response_model=ItemResponse)
def read_item(item_id: int, db: Session = next(get_db())):
    item = db.query(Item).filter(Item.id == item_id).first()
    if item is None:
        raise HTTPException(status_code=404, detail="Item not found")
    return item

# Endpoint to update an item by ID
@app.put("/items/{item_id}", response_model=ItemResponse)
def update_item(item_id: int, item: ItemCreate, db: Session = next(get_db())):
    db_item = db.query(Item).filter(Item.id == item_id).first()
    if db_item is None:
        raise HTTPException(status_code=404, detail="Item not found")
    
    db_item.name = item.name
    db_item.description = item.description
    db_item.price = item.price
    db.commit()
    db.refresh(db_item)
    return db_item

# Endpoint to delete an item by ID
@app.delete("/items/{item_id}", response_model=dict)
def delete_item(item_id: int, db: Session = next(get_db())):
    db_item = db.query(Item).filter(Item.id == item_id).first()
    if db_item is None:
        raise HTTPException(status_code=404, detail="Item not found")
    
    db.delete(db_item)
    db.commit()
    return {"message": f"Item with ID {item_id} deleted"}

# Endpoint to get the count of items
@app.get("/items/count", response_model=dict)
def get_item_count(db: Session = next(get_db())):
    count = db.query(Item).count()
    return {"count": count}



Step 4: Run the FastAPI Application
Run the FastAPI application using Uvicorn:
bash
uvicorn main:app --reload



Step 5: Test the Endpoints
You can test the endpoints using tools like Postman, cURL, or directly in your browser.
Create a new item (POST request to /items/):
json
{
    "name": "Sample Item",
    "description": "This is a sample item.",
    "price": 19.99
}


Get all items (GET request to /items/).
Get a specific item (GET request to /items/{item_id}).
Update an item (PUT request to /items/{item_id}):
json
{
    "name": "Updated Item",
    "description": "This is an updated item.",
    "price": 29.99
}

Delete an item (DELETE request to /items/{item_id}).
Get the count of items (GET request to /items/count).
