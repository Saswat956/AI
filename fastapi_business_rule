from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, Integer, String, TIMESTAMP
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from datetime import datetime

# Database configuration
DATABASE_URL = "postgresql://username:password@localhost/fastapi_db"  # Replace with your PostgreSQL credentials

# SQLAlchemy setup
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Define the PolicyBusinessRule model
class PolicyBusinessRule(Base):
    __tablename__ = 'policy_business_rules'
    __table_args__ = {'schema': 'policy_repository'}  # Specify the schema

    br_rule_id = Column(Integer, primary_key=True, index=True)
    policy_id = Column(Integer, nullable=False)
    standard_id = Column(Integer, nullable=False)
    rule_desc = Column(String(500))
    rule_definition = Column(String(500), nullable=False)
    status = Column(String(30), nullable=False)
    create_ts = Column(TIMESTAMP, nullable=False, default=datetime.utcnow)
    created_by_user_id = Column(String(34), nullable=False)
    lst_updt_by_user_id = Column(String(34))
    lst_updt_ts = Column(TIMESTAMP)

# Create the database tables
Base.metadata.create_all(bind=engine)

# FastAPI instance
app = FastAPI()

# Pydantic models for request validation
class PolicyBusinessRuleCreate(BaseModel):
    policy_id: int
    standard_id: int
    rule_desc: str = None
    rule_definition: str
    status: str
    created_by_user_id: str
    lst_updt_by_user_id: str = None
    lst_updt_ts: datetime = None

class PolicyBusinessRuleResponse(PolicyBusinessRuleCreate):
    br_rule_id: int
    create_ts: datetime

    class Config:
        orm_mode = True

# Dependency to get the database session
def get_db() -> Session:
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Endpoint to create a new policy business rule
@app.post("/policy_business_rules/", response_model=PolicyBusinessRuleResponse)
def create_policy_business_rule(rule: PolicyBusinessRuleCreate, db: Session = Depends(get_db)):
    db_rule = PolicyBusinessRule(**rule.dict())
    db.add(db_rule)
    db.commit()
    db.refresh(db_rule)
    return db_rule

# Endpoint to get all policy business rules
@app.get("/policy_business_rules/", response_model=list[PolicyBusinessRuleResponse])
def read_policy_business_rules(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    rules = db.query(PolicyBusinessRule).offset(skip).limit(limit).all()
    return rules

# Endpoint to get a specific policy business rule by ID
@app.get("/policy_business_rules/{br_rule_id}", response_model=PolicyBusinessRuleResponse)
def read_policy_business_rule(br_rule_id: int, db: Session = Depends(get_db)):
    rule = db.query(PolicyBusinessRule).filter(PolicyBusinessRule.br_rule_id == br_rule_id).first()
    if rule is None:
        raise HTTPException(status_code=404, detail="Rule not found")
    return rule

# Endpoint to update a policy business rule by ID
@app.put("/policy_business_rules/{br_rule_id}", response_model=PolicyBusinessRuleResponse)
def update_policy_business_rule(br_rule_id: int, rule: PolicyBusinessRuleCreate, db: Session = Depends(get_db)):
    db_rule = db.query(PolicyBusinessRule).filter(PolicyBusinessRule.br_rule_id == br_rule_id).first()
    if db_rule is None:
        raise HTTPException(status_code=404, detail="Rule not found")
    
    for key, value in rule.dict().items():
        setattr(db_rule, key, value)
    
    db.commit()
    db.refresh(db_rule)
    return db_rule

# Endpoint to delete a policy business rule by ID
@app.delete("/policy_business_rules/{br_rule_id}", response_model=dict)
def delete_policy_business_rule(br_rule_id: int, db: Session = Depends(get_db)):
    db_rule = db.query(PolicyBusinessRule).filter(PolicyBusinessRule.br_rule_id == br_rule_id).first()
    if db_rule is None:
        raise HTTPException(status_code=404, detail="Rule not found")
    
    db.delete(db_rule)
    db.commit()
    return {"message": f"Rule with ID {br_rule_id} deleted"}

# Endpoint to get the count of policy business rules
@app.get("/policy_business_rules/count", response_model=dict)
def get_policy_business_rule_count(db: Session = Depends(get_db)):
    count = db.query(PolicyBusinessRule).count()   
    return {"count": count}
